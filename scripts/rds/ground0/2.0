import base64
import gzip
import json
from datetime import datetime


def lambda_handler(event, context):
    output = []

    for record in event['records']:
        print(record['recordId'])
        data = base64.b64decode(record['data'])
        decompressed_data = gzip.decompress(data).decode('utf-8')
        parsed_data = json.loads(decompressed_data)

        # Extract the message field from the log event
        payload = parsed_data['logEvents'][0]['message']
        print(payload)

        # Transform the payload to JSON format
        fields = payload.split('\n')
        payload_dict = {}
        for field in fields:
            key_value = field.split(':', 1)
            if len(key_value) == 2:
                key = key_value[0].strip().lower().replace(' ', '_')
                value = key_value[1].strip()
                payload_dict[key] = value

        # Add a timestamp key to the payload dictionary
        timestamp_str = payload_dict.get('timestamp')
        if timestamp_str:
            timestamp = datetime.strptime(timestamp_str, '%a %b %d %H:%M:%S %Y %z')
            payload_dict['timestamp'] = timestamp.isoformat()

        output_record = {
            'recordId': record['recordId'],
            'result': 'Ok',
            'data': base64.b64encode(json.dumps(payload_dict).encode('utf-8')).decode('utf-8')
        }
        output.append(output_record)

    print('Successfully processed {} records.'.format(len(event['records'])))

    return {'records': output}


import base64
import gzip
import json


def lambda_handler(event, context):
    output = []

    for record in event['records']:
        print(record['recordId'])
        data = base64.b64decode(record['data'])
        decompressed_data = gzip.decompress(data).decode('utf-8')
        parsed_data = json.loads(decompressed_data)

        # Extract the message field from the log event
        payload = parsed_data['logEvents'][0]['message']
        print(payload)

        # Transform the payload to JSON format
        fields = payload.split('\n')
        payload_dict = {}
        for field in fields:
            key_value = field.split(':', 1)
            if len(key_value) == 2:
                key = key_value[0].strip().lower().replace(' ', '_')
                value = key_value[1].strip()
                payload_dict[key] = value
        print(payload_dict)
        output_record = {
            'recordId': record['recordId'],
            'result': 'Ok',
            'data': base64.b64encode(json.dumps(payload_dict).encode('utf-8')).decode('utf-8')
        }
        output.append(output_record)

    print('Successfully processed {} records.'.format(len(event['records'])))

    return {'records': output}
